///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

In this project we’re going to use List slightly differently, because we’ll be making it loop over an array of strings. We’ve used ForEach with ranges a lot, either hard-coded (0..<5) or relying on variable data (0..<students.count), and that works great because SwiftUI can identify each row uniquely based on its position in the range.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

When working with an array of data, SwiftUI still needs to know how to identify each row uniquely, so if one gets removed it can simply remove that one rather than having to redraw the whole list. This is where the id parameter comes in, and it works identically in both List and ForEach – it lets us tell SwiftUI exactly what makes each item in the array unique.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

When working with arrays of strings and numbers, the only thing that makes those values unique is the values themselves.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

When Xcode builds your iOS app, it creates something called a “bundle”. This happens on all of Apple’s platforms, including macOS, and it allows the system to store all the files for a single app in one place – the binary code (the actual compiled Swift stuff we wrote), all the artwork, plus any extra files we need all in one place.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Swift gives us a method called components(separatedBy:) that can converts a single string into an array of strings by breaking it up wherever another string is found. For example, this will create the array ["a", "b", "c"]:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

But one thing List can do that Form can’t is to generate its rows entirely from dynamic content without needing a ForEach.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    func test ()
    {
        let word = "Swift"
        let checker = UITextChecker()
        let range = NSRange(location: 0, length: word.utf16.count)
        
        let mispelledRanged = checker.rangeOfMisspelledWord(in: word, range: range, startingAt: 0, wrap: false, language: "en")
        
        let allGood =   mispelledRanged.location
        
    }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

When Xcode builds an iOS project, it puts your compiled program, your asset catalog, and any other assets into a single directory called a bundle, then gives that bundle the name YourAppName.app. This “.app” extension is automatically recognized by iOS and Apple’s other platforms, which is why if you double-click something like Notes.app on macOS it knows to launch the program inside the bundle.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

We already defined a property called rootWord, which will contain the word we want the player to spell from. What we need to do now is write a new method called startGame() that will:

Find start.txt in our bundle
Load it into a string
Split that string into array of strings, with each element being one word
Pick one random word from there to be assigned to rootWord, or use a sensible default if the array is empty.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Each of those four tasks corresponds to one line of code, but there’s a twist: what if we can’t locate start.txt in our app bundle, or if we can locate it but we can’t load it? In that case we have a serious problem, because our app is really broken – either we forgot to include the file somehow (in which case our game won’t work), or we included it but for some reason iOS refused to let us read it (in which case our game won’t work, and our app is broken).

Regardless of what caused it, this is a situation that never ought to happen, and Swift gives us a function called fatalError() that lets us respond to unresolvable problems really clearly. When we call fatalError() it will – unconditionally and always – cause our app to crash. It will just die. Not “might die” or “maybe die”: it will always just terminate straight away.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
